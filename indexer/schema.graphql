# ============ POOL REGISTRY ============

type Pool @entity {
  id: ID! # Pool ID (bytes32)
  currency0: String! # Token 0 address
  currency1: String! # Token 1 address
  fee: Int! # Fee tier
  tickSpacing: Int! # Tick spacing
  hooks: String! # Hooks contract address
  
  # Current state
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  tick: Int!
  
  # Cumulative stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  txCount: BigInt!
  
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

# ============ PROTOCOL STATISTICS ============

type ProtocolStats @entity {
  id: ID! # "uniswap-v4"
  name: String!
  
  # Pool metrics
  poolCount: Int!
  
  # Volume (we'll track major tokens)
  volumeTotalETH: BigDecimal!
  volume24hETH: BigDecimal!
  volumeTotalUSDC: BigDecimal!
  volume24hUSDC: BigDecimal!
  
  # Activity
  totalTransactions: BigInt!
  transactions24h: BigInt!
  totalSwaps: BigInt!
  swaps24h: BigInt!
  totalLiquidityModifications: BigInt!
  
  # Users
  uniqueUsers: BigInt!
  uniqueUsers24h: BigInt!
  
  # Performance
  avgGasPrice: BigInt!
  tps: Float!
  
  lastUpdateTime: BigInt!
  lastBlockNumber: BigInt!
}

# ============ TRANSACTIONS ============

type Transaction @entity {
  id: ID! # txHash-logIndex
  txType: String! # "swap" | "add_liquidity" | "remove_liquidity"
  pool: Pool! # Relation to pool
  poolId: String! # Pool ID for filtering
  
  sender: String!
  
  # Token amounts (can be positive or negative)
  amount0: BigDecimal!
  amount1: BigDecimal!
  
  # Token addresses for easy filtering
  token0: String!
  token1: String!
  
  # Swap-specific data
  sqrtPriceX96: BigInt
  liquidity: BigInt
  tick: Int
  
  # Liquidity-specific data
  tickLower: Int
  tickUpper: Int
  liquidityDelta: BigDecimal
  
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  logIndex: Int!
  gasPrice: BigInt!
}

# ============ WHALE TRACKING ============

type WhaleActivity @entity {
  id: ID! # wallet address
  wallet: String!
  
  # Activity by token
  volumeETH: BigDecimal!
  volumeUSDC: BigDecimal!
  volumeWBTC: BigDecimal!
  
  transactionCount: Int!
  swapCount: Int!
  liquidityModCount: Int!
  
  # Pool diversity
  poolsUsed: [String!]! # Array of pool IDs
  poolCount: Int!
  
  largestSwapETH: BigDecimal!
  largestSwapUSDC: BigDecimal!
  
  firstSeenTime: BigInt!
  lastActiveTime: BigInt!
}

# ============ CAPITAL FLOWS (CROSS-POOL) ============

type CapitalFlow @entity {
  id: ID! # flowId
  wallet: String!
  
  fromPoolId: String!
  toPoolId: String!
  
  # Token being moved
  tokenAddress: String!
  tokenSymbol: String!
  amount: BigDecimal!
  
  timestamp: BigInt!
  timeDelta: Int! # Seconds between remove and add liquidity
  flowType: String! # "rebalancing" | "fast_move"
  
  withdrawTxHash: String!
  depositTxHash: String!
}

# ============ HOURLY SNAPSHOTS ============

type HourlySnapshot @entity {
  id: ID! # "uniswap-v4-{timestamp}"
  timestamp: BigInt!
  
  # Protocol-wide metrics
  totalVolumeETH: BigDecimal!
  totalVolumeUSDC: BigDecimal!
  transactions: Int!
  swaps: Int!
  uniqueUsers: Int!
  poolCount: Int!
  
  avgGasPrice: BigInt!
}

# ============ POOL HOURLY SNAPSHOTS ============

type PoolHourlySnapshot @entity {
  id: ID! # "poolId-{timestamp}"
  pool: Pool!
  poolId: String!
  timestamp: BigInt!
  
  # Pool state at this hour
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  tick: Int!
  
  # Volume this hour
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  txCount: Int!
  
  # User activity
  uniqueUsers: Int!
}

# ============ TOKEN REGISTRY ============

type Token @entity {
  id: ID! # token address
  symbol: String!
  name: String!
  decimals: Int!
  
  # Usage metrics
  poolCount: Int!
  totalVolume: BigDecimal!
}

# ============ AAVE V3 SPECIFIC ENTITIES ============

type AaveReserve @entity {
  id: ID! # reserve token address
  symbol: String!
  name: String!
  decimals: Int!
  
  # Total amounts
  totalSupplied: BigDecimal!
  totalBorrowed: BigDecimal!
  
  # Rates (in Ray units: 1e27)
  liquidityRate: BigInt! # Deposit APY
  stableBorrowRate: BigInt!
  variableBorrowRate: BigInt! # Borrow APY
  
  # Indexes
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  
  # Utilization
  utilizationRate: Float! # totalBorrowed / totalSupplied
  
  # Activity
  supplyCount: BigInt!
  borrowCount: BigInt!
  liquidationCount: BigInt!
  
  lastUpdateTimestamp: BigInt!
  lastUpdateBlockNumber: BigInt!
}

type AaveProtocolStats @entity {
  id: ID! # "aave-v3"
  name: String!
  
  # TVL in major assets
  totalSuppliedETH: BigDecimal!
  totalSuppliedUSDC: BigDecimal!
  totalSuppliedDAI: BigDecimal!
  totalSuppliedWBTC: BigDecimal!
  
  # Borrowed amounts
  totalBorrowedETH: BigDecimal!
  totalBorrowedUSDC: BigDecimal!
  totalBorrowedDAI: BigDecimal!
  totalBorrowedWBTC: BigDecimal!
  
  # Global utilization
  globalUtilizationRate: Float!
  
  # Activity counts
  totalSupplies: BigInt!
  supplies24h: BigInt!
  totalWithdrawals: BigInt!
  withdrawals24h: BigInt!
  totalBorrows: BigInt!
  borrows24h: BigInt!
  totalRepays: BigInt!
  repays24h: BigInt!
  totalLiquidations: BigInt!
  liquidations24h: BigInt!
  
  # Users
  uniqueSuppliers: BigInt!
  uniqueBorrowers: BigInt!
  uniqueUsers24h: BigInt!
  
  # Performance
  avgGasPrice: BigInt!
  tps: Float!
  
  # Health
  healthScore: Int! # 0-100 based on utilization, liquidations, etc.
  
  lastUpdateTime: BigInt!
  lastBlockNumber: BigInt!
}

type AaveTransaction @entity {
  id: ID! # txHash-logIndex
  txType: String! # "supply" | "withdraw" | "borrow" | "repay" | "liquidation"
  
  # User
  user: String!
  onBehalfOf: String # For supply/borrow
  
  # Asset
  reserve: String! # Token address
  reserveSymbol: String!
  amount: BigDecimal!
  
  # Liquidation specific
  collateralAsset: String
  debtAsset: String
  liquidator: String
  debtToCover: BigDecimal
  liquidatedCollateralAmount: BigDecimal
  
  # Borrow specific
  interestRateMode: Int # 1 = stable, 2 = variable
  borrowRate: BigInt
  
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  logIndex: Int!
  gasPrice: BigInt!
}

type AaveUserPosition @entity {
  id: ID! # user-reserve
  user: String!
  reserve: String!
  reserveSymbol: String!
  
  # Balances
  suppliedAmount: BigDecimal!
  borrowedAmount: BigDecimal!
  
  # Activity
  supplyCount: Int!
  withdrawCount: Int!
  borrowCount: Int!
  repayCount: Int!
  
  firstSupplyTime: BigInt
  lastActivityTime: BigInt!
}

# ============ CROSS-PROTOCOL CAPITAL FLOWS ============

type CrossProtocolFlow @entity {
  id: ID! # flowId
  wallet: String!
  
  # From protocol
  fromProtocol: String! # "uniswap-v4" | "aave-v3" | "lido" | "curve" | "maker"
  fromPoolOrReserve: String!
  
  # To protocol
  toProtocol: String! # "uniswap-v4" | "aave-v3" | "lido" | "curve" | "maker"
  toPoolOrReserve: String!
  
  # Asset moved
  tokenAddress: String!
  tokenSymbol: String!
  amount: BigDecimal!
  
  timestamp: BigInt!
  timeDelta: Int! # Seconds between transactions
  flowType: String! # "arbitrage" | "yield_farming" | "rebalancing" | "liquidity_rebalancing"
  
  fromTxHash: String!
  toTxHash: String!
}

# ============ MULTI-PROTOCOL WHALE TRACKING ============

type MultiProtocolWhale @entity {
  id: ID! # wallet address
  wallet: String!
  
  # Uniswap V4 activity
  uniswapVolumeETH: BigDecimal!
  uniswapVolumeUSDC: BigDecimal!
  uniswapSwapCount: Int!
  
  # Aave V3 activity
  aaveSuppliedETH: BigDecimal!
  aaveSuppliedUSDC: BigDecimal!
  aaveBorrowedETH: BigDecimal!
  aaveBorrowedUSDC: BigDecimal!
  aaveSupplyCount: Int!
  aaveBorrowCount: Int!
  
  # Lido activity
  lidoStakedETH: BigDecimal!
  lidoStakeCount: Int!
  
  # Curve activity
  curveVolumeETH: BigDecimal!
  curveVolumeUSDC: BigDecimal!
  curveSwapCount: Int!
  
  # Maker activity
  makerCollateralETH: BigDecimal!
  makerDebtDAI: BigDecimal!
  makerVaultCount: Int!
  
  # Cross-protocol
  protocolsUsed: [String!]!
  crossProtocolFlows: Int!
  
  # Overall
  totalTransactionCount: Int!
  largestTransactionETH: BigDecimal!
  
  firstSeenTime: BigInt!
  lastActiveTime: BigInt!
}

# ============ PROTOCOL HEALTH (Multi-Protocol) ============

type ProtocolHealthSnapshot @entity {
  id: ID! # protocol-timestamp
  protocol: String! # "uniswap-v4" | "aave-v3"
  timestamp: BigInt!
  
  healthScore: Int! # 0-100
  
  # Indicators (protocol-specific)
  utilizationRate: Float
  tvlChangePercent24h: Float
  whaleExits1h: Int!
  gasSpike: Float!
  liquidationCount1h: Int! # Aave specific
  
  warnings: String! # JSON array
}

# ============ HOURLY SNAPSHOTS (Multi-Protocol) ============

type AaveHourlySnapshot @entity {
  id: ID! # "aave-v3-{timestamp}"
  timestamp: BigInt!
  
  # Supplied
  totalSuppliedETH: BigDecimal!
  totalSuppliedUSDC: BigDecimal!
  
  # Borrowed
  totalBorrowedETH: BigDecimal!
  totalBorrowedUSDC: BigDecimal!
  
  # Utilization
  globalUtilizationRate: Float!
  
  # Activity
  supplies: Int!
  withdrawals: Int!
  borrows: Int!
  repays: Int!
  liquidations: Int!
  
  uniqueUsers: Int!
  healthScore: Int!
}

# ============ LIDO ENTITIES ============

type LidoProtocolStats @entity {
  id: ID! # "lido"
  name: String!
  
  # Staking metrics
  totalStakedETH: BigDecimal! # Total ETH ever staked
  totalStETH: BigDecimal! # Current stETH supply
  
  # Activity
  totalSubmissions: BigInt! # Total stake transactions
  submissions24h: BigInt!
  totalTransfers: BigInt!
  transfers24h: BigInt!
  
  # Users
  uniqueStakers: BigInt!
  uniqueStakers24h: BigInt!
  
  # Performance
  avgStakeSize: BigDecimal!
  avgGasPrice: BigInt!
  tps: Float!
  
  lastUpdateTime: BigInt!
  lastBlockNumber: BigInt!
}

type LidoTransaction @entity {
  id: ID! # txHash-logIndex
  txType: String! # "stake" | "transfer"
  
  from: String!
  to: String # For transfers
  amount: BigDecimal!
  
  # For stake transactions
  referral: String
  
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  logIndex: Int!
  gasPrice: BigInt!
}

type LidoStaker @entity {
  id: ID! # staker address
  staker: String!
  
  totalStakedETH: BigDecimal!
  stakeCount: Int!
  
  firstStakeTime: BigInt!
  lastStakeTime: BigInt!
}

# ============ CURVE ENTITIES ============

type CurvePool @entity {
  id: ID! # pool address
  name: String!
  poolType: String! # "3pool" | "steth" | "tricrypto"
  
  # Tokens in pool
  tokens: [String!]!
  tokenSymbols: [String!]!
  
  # Volume
  volumeTotal: BigDecimal!
  volume24h: BigDecimal!
  
  # Liquidity
  totalLiquidity: BigDecimal! # LP token supply
  
  # Activity
  swapCount: BigInt!
  swapCount24h: BigInt!
  addLiquidityCount: BigInt!
  removeLiquidityCount: BigInt!
  
  # Users
  uniqueUsers: BigInt!
  
  createdAtTimestamp: BigInt!
  lastActivityTimestamp: BigInt!
}

type CurveProtocolStats @entity {
  id: ID! # "curve"
  name: String!
  
  # Pools
  poolCount: Int!
  
  # Volume by major tokens
  volumeTotalUSDC: BigDecimal!
  volume24hUSDC: BigDecimal!
  volumeTotalETH: BigDecimal!
  volume24hETH: BigDecimal!
  volumeTotalDAI: BigDecimal!
  volume24hDAI: BigDecimal!
  
  # Activity
  totalSwaps: BigInt!
  swaps24h: BigInt!
  totalLiquidityAdds: BigInt!
  liquidityAdds24h: BigInt!
  totalLiquidityRemoves: BigInt!
  liquidityRemoves24h: BigInt!
  
  # Users
  uniqueUsers: BigInt!
  uniqueUsers24h: BigInt!
  
  # Performance
  avgGasPrice: BigInt!
  tps: Float!
  
  lastUpdateTime: BigInt!
  lastBlockNumber: BigInt!
}

type CurveTransaction @entity {
  id: ID! # txHash-logIndex
  pool: CurvePool!
  poolId: String!
  txType: String! # "swap" | "add_liquidity" | "remove_liquidity"
  
  user: String!
  
  # Swap specific
  soldTokenIndex: Int
  boughtTokenIndex: Int
  tokensSold: BigDecimal
  tokensBought: BigDecimal
  
  # Liquidity specific
  tokenAmounts: String
  lpTokenAmount: BigDecimal
  
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  logIndex: Int!
  gasPrice: BigInt!
}

# ============ MAKERDAO ENTITIES ============

type MakerVault @entity {
  id: ID! # vault ID (CDP number)
  owner: String!
  ilk: String! # Collateral type (e.g., "ETH-A")
  
  # Collateral
  collateralAmount: BigDecimal! # ink
  collateralType: String!
  
  # Debt
  debtAmount: BigDecimal! # art (normalized debt)
  
  # Status
  isActive: Boolean!
  liquidated: Boolean!
  
  # Activity counts
  modificationCount: Int!
  
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  lastModifiedTimestamp: BigInt!
}

type MakerProtocolStats @entity {
  id: ID! # "maker"
  name: String!
  
  # Vaults
  totalVaults: Int!
  activeVaults: Int!
  
  # Collateral by type
  totalCollateralETH: BigDecimal!
  totalCollateralWBTC: BigDecimal!
  
  # DAI
  totalDAIMinted: BigDecimal!
  totalDAIRepaid: BigDecimal!
  outstandingDAI: BigDecimal!
  
  # Activity
  totalVaultModifications: BigInt!
  vaultModifications24h: BigInt!
  totalLiquidations: BigInt!
  liquidations24h: BigInt!
  
  # Users
  uniqueVaultOwners: BigInt!
  
  # Performance
  avgCollateralizationRatio: Float!
  avgGasPrice: BigInt!
  
  # Health
  healthScore: Int!
  
  lastUpdateTime: BigInt!
  lastBlockNumber: BigInt!
}

type MakerTransaction @entity {
  id: ID! # txHash-logIndex
  txType: String! # "vault_open" | "vault_modify" | "liquidation"
  
  # Vault info
  vaultId: String
  owner: String!
  ilk: String # Collateral type
  
  # Amounts
  collateralDelta: BigDecimal # Change in collateral
  debtDelta: BigDecimal # Change in debt
  
  # Liquidation specific
  liquidator: String
  collateralLiquidated: BigDecimal
  debtCovered: BigDecimal
  
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  logIndex: Int!
  gasPrice: BigInt!
}

# ============ UPDATED GLOBAL STATS ============

type GlobalStats @entity {
  id: ID! # "global"
  
  # Protocol counts
  protocolCount: Int! # 5 protocols
  
  # Aggregate metrics
  totalTransactions: BigInt!
  transactions24h: BigInt!
  
  # Users across all protocols
  totalUniqueUsers: BigInt!
  uniqueUsers24h: BigInt!
  
  # Cross-protocol activity
  crossProtocolFlows: Int!
  multiProtocolWhales: Int!
  
  lastUpdateTime: BigInt!
}

# ============ HOURLY SNAPSHOTS ============

type LidoHourlySnapshot @entity {
  id: ID! # "lido-{timestamp}"
  timestamp: BigInt!
  
  totalStakedETH: BigDecimal!
  totalStETH: BigDecimal!
  submissions: Int!
  transfers: Int!
  uniqueStakers: Int!
  avgGasPrice: BigInt!
}

type CurveHourlySnapshot @entity {
  id: ID! # "curve-{timestamp}"
  timestamp: BigInt!
  
  volumeETH: BigDecimal!
  volumeUSDC: BigDecimal!
  volumeDAI: BigDecimal!
  swaps: Int!
  liquidityAdds: Int!
  liquidityRemoves: Int!
  uniqueUsers: Int!
}

type MakerHourlySnapshot @entity {
  id: ID! # "maker-{timestamp}"
  timestamp: BigInt!
  
  totalVaults: Int!
  activeVaults: Int!
  totalCollateralETH: BigDecimal!
  outstandingDAI: BigDecimal!
  vaultModifications: Int!
  liquidations: Int!
  avgCollateralizationRatio: Float!
}