# ============ POOL REGISTRY ============

type Pool @entity {
  id: ID! # Pool ID (bytes32)
  currency0: String! # Token 0 address
  currency1: String! # Token 1 address
  fee: Int! # Fee tier
  tickSpacing: Int! # Tick spacing
  hooks: String! # Hooks contract address
  
  # Current state
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  tick: Int!
  
  # Cumulative stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  txCount: BigInt!
  
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

# ============ PROTOCOL STATISTICS ============

type ProtocolStats @entity {
  id: ID! # "uniswap-v4"
  name: String!
  
  # Pool metrics
  poolCount: Int!
  
  # Volume (we'll track major tokens)
  volumeTotalETH: BigDecimal!
  volume24hETH: BigDecimal!
  volumeTotalUSDC: BigDecimal!
  volume24hUSDC: BigDecimal!
  
  # Activity
  totalTransactions: BigInt!
  transactions24h: BigInt!
  totalSwaps: BigInt!
  swaps24h: BigInt!
  totalLiquidityModifications: BigInt!
  
  # Users
  uniqueUsers: BigInt!
  uniqueUsers24h: BigInt!
  
  # Performance
  avgGasPrice: BigInt!
  tps: Float!
  
  lastUpdateTime: BigInt!
  lastBlockNumber: BigInt!
}

# ============ TRANSACTIONS ============

type Transaction @entity {
  id: ID! # txHash-logIndex
  txType: String! # "swap" | "add_liquidity" | "remove_liquidity"
  pool: Pool! # Relation to pool
  poolId: String! # Pool ID for filtering
  
  sender: String!
  
  # Token amounts (can be positive or negative)
  amount0: BigDecimal!
  amount1: BigDecimal!
  
  # Token addresses for easy filtering
  token0: String!
  token1: String!
  
  # Swap-specific data
  sqrtPriceX96: BigInt
  liquidity: BigInt
  tick: Int
  
  # Liquidity-specific data
  tickLower: Int
  tickUpper: Int
  liquidityDelta: BigDecimal
  
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: String!
  logIndex: Int!
  gasPrice: BigInt!
}

# ============ WHALE TRACKING ============

type WhaleActivity @entity {
  id: ID! # wallet address
  wallet: String!
  
  # Activity by token
  volumeETH: BigDecimal!
  volumeUSDC: BigDecimal!
  volumeWBTC: BigDecimal!
  
  transactionCount: Int!
  swapCount: Int!
  liquidityModCount: Int!
  
  # Pool diversity
  poolsUsed: [String!]! # Array of pool IDs
  poolCount: Int!
  
  largestSwapETH: BigDecimal!
  largestSwapUSDC: BigDecimal!
  
  firstSeenTime: BigInt!
  lastActiveTime: BigInt!
}

# ============ CAPITAL FLOWS (CROSS-POOL) ============

type CapitalFlow @entity {
  id: ID! # flowId
  wallet: String!
  
  fromPoolId: String!
  toPoolId: String!
  
  # Token being moved
  tokenAddress: String!
  tokenSymbol: String!
  amount: BigDecimal!
  
  timestamp: BigInt!
  timeDelta: Int! # Seconds between remove and add liquidity
  flowType: String! # "rebalancing" | "fast_move"
  
  withdrawTxHash: String!
  depositTxHash: String!
}

# ============ HOURLY SNAPSHOTS ============

type HourlySnapshot @entity {
  id: ID! # "uniswap-v4-{timestamp}"
  timestamp: BigInt!
  
  # Protocol-wide metrics
  totalVolumeETH: BigDecimal!
  totalVolumeUSDC: BigDecimal!
  transactions: Int!
  swaps: Int!
  uniqueUsers: Int!
  poolCount: Int!
  
  avgGasPrice: BigInt!
}

# ============ POOL HOURLY SNAPSHOTS ============

type PoolHourlySnapshot @entity {
  id: ID! # "poolId-{timestamp}"
  pool: Pool!
  poolId: String!
  timestamp: BigInt!
  
  # Pool state at this hour
  liquidity: BigInt!
  sqrtPriceX96: BigInt!
  tick: Int!
  
  # Volume this hour
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  txCount: Int!
  
  # User activity
  uniqueUsers: Int!
}

# ============ TOKEN REGISTRY ============

type Token @entity {
  id: ID! # token address
  symbol: String!
  name: String!
  decimals: Int!
  
  # Usage metrics
  poolCount: Int!
  totalVolume: BigDecimal!
}